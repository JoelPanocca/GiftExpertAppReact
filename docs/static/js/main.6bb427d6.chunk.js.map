{"version":3,"sources":["components/AddCategory.js","helper/GetGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","newCategory","setNewCategory","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GetGifs","category","a","url","fetch","result","json","data","map","obj","id","titulo","title","images","original","GifItem","img","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGif","image","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAaA,OACI,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACEJ,EAAYK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACxCN,EAAe,MASnB,SACI,uBAAOO,KAAO,OAAOC,MAAOT,EAAaU,SAL1B,SAACP,GACpBF,EAAeE,EAAEQ,OAAOF,a,+BCfnBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,kDACoCF,EADpC,+DAEEG,MAAMD,GAFR,cAEbE,EAFa,gBAGIA,EAAOC,OAHX,uBAGXC,EAHW,EAGXA,KAHW,kBAIZA,EAAKC,KAAI,SAACC,GAAS,IAAD,EACvB,MAAO,CACLC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZT,IAAG,UAAEM,EAAII,cAAN,aAAE,EAAYC,SAASX,SARX,2CAAH,sDCEPY,EAAU,SAACC,GACtB,OACE,sBAAKC,UAAU,OAAf,UACE,4BAAID,EAAIL,SACR,qBAAKO,IAAKF,EAAIb,IAAKgB,IAAKH,EAAIL,aCFrBS,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACxB,ECDyB,SAACA,GAC1B,MAA0Bd,mBAAS,CACjCoB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CAAEhB,KAAMmB,EAAML,SAAS,MAClC,UAGL,CAACpB,IAEGqB,EDfyBQ,CAAY7B,GAAhCY,EAAZ,EAAON,KAAac,EAApB,EAAoBA,QACpB,OACE,qCACE,6BAAKpB,IACJoB,GAAW,4CAEZ,qBAAKJ,UAAU,YAAf,SACGJ,EAAOL,KAAI,SAACuB,GACX,OAAO,cAAC,EAAD,eAA4BA,GAAdA,EAAMrB,aETxBsB,EAAe,WAC1B,MAAoC7C,mBAAS,CAC3C,cADF,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAIA,OACE,qCACE,gDAEA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEM+C,EAAWzB,KAAI,SAAC0B,GACZ,OAAO,cAAC,EAAD,CAAqBjC,SAAYiC,GAAjBA,YCbvCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6bb427d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [newCategory, setNewCategory] = useState('')\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (newCategory.trim().length > 0) {\r\n            setCategories( cats => [newCategory, ...cats]);\r\n            setNewCategory('');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n        setNewCategory(e.target.value);\r\n    }\r\n    return (\r\n        <form onSubmit={handleOnSubmit}>\r\n            <input type = \"text\" value={newCategory} onChange={handleOnChange}/> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const GetGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q= ${category}&limit=10&api_key=ixQYzZbB6ciVwAspI4OyraUVPyQtX3vK`;\r\n    const result = await fetch(url);\r\n    const { data } = await result.json();\r\n    return data.map((obj) => {\r\n      return {\r\n        id: obj.id,\r\n        titulo: obj.title,\r\n        url: obj.images?.original.url,\r\n      };\r\n    });\r\n  };","import React from \"react\";\r\n\r\nexport const GifItem = (img) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <p>{img.titulo}</p>\r\n      <img src={img.url} alt={img.titulo} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGif } from \"../hooks/useFetchGif\";\r\nimport { GifItem } from \"./GifItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const {data:images, loading } = useFetchGif(category);\r\n  return (\r\n    <>\r\n      <h2>{category}</h2>\r\n      {loading && <p>Cargando...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((image) => {\r\n          return <GifItem key={image.id} {...image} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { GetGifs } from \"../helper/GetGifs\";\r\n\r\n//Esto es un CustomHook\r\nexport const useFetchGif = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    GetGifs(category).then((imgs) => {\r\n        setTimeout(() => {\r\n            console.log(imgs);\r\n            setState({ data: imgs, loading: false })\r\n        },2000);    \r\n    }\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"One Punch\"\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <h2> GifExpert App</h2>\r\n      \r\n      <AddCategory setCategories = {setCategories}/>\r\n      <hr />\r\n      <ol>      \r\n        {\r\n            categories.map((cat) => {\r\n                return <GifGrid key = {cat} category = {cat} />\r\n            })\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(\n  <GifExpertApp />, \n  document.getElementById(\"root\"));\n"],"sourceRoot":""}